## Git / GitHub

`$ git status`  
`$ git log`  
`$ git diff HEAD`: shwo the difference with the most recent commit  

---

### creating a new repository

- create a repository online

- **if copying from online**

    2. `$ git clone <url_of_online_repository>`

- **if files existing locally**

    1. go inside the folder to be uploaded
    2. `$ git init`
    4. `$ git add <...>`
    5. `$ git commit -m “<explanatory texts about this change>”`
    6. `$ git remote add <name> <url_of_online_repository>`
    7. `$ git push -u <name> master` (`-u`: git remembers the name and branch; next time can be omitted)

- generate README file (locally)
    1. `$ echo “# <repository name>” >> README.md`

- create .gitignore file (locally)
    1. go to the folder which contains .git folder
    2. `$ touch .gitignore`
    3. `$ open .gitignore`
    4. add the files / directories to be ignored

---

### update changes

- from remote
    1. `$ git pull <name> master`
    2. may need to. 
        3. `$ i`
        4. write the merge message
        5. press **esc**
        6. `$ :wq`
        7. press **enter**

- from local
    1. `$ git add <...>`
        * to undo: `$ git checkout -- <...>`
    2. `$ git commit -m <'...'>`
        * to unstage files: `$ git reset <...>`
    3. `$ git push`

- rename a repository
    1. rename online
    2. local: `$ git remote set-url <name> <new url>`

- to remove changes
    * `$ git reset <location>`: move back
    * `$ git revert HEAD`: new commit that reverses the most recent commit

- to select certain commits as new commits
    * `$ git cherry-pick x y ...`: copy commits (can be from any OTHER branch) and paste in HEAD
    * `$ git rebase <location>`: move HEAD to <location> & move / copy current branch to <location>
    * `$ git rebase -i <location>`: a UI shows up which enables select & reorder commits; new branch with selected commits starting from location

#### git add

* `$ git add <file / directory>`
* `$ git add '*.<filetype>'`
* `$ git add -A` ALL
* `$ git add .` new & modified; without deleted files
* `$ git add -u` modified & deleted; without new files

---

### branches

* `$ git branch`: show the local branches
* `$ git branch <branch_name>`: create new branch

* move commit (HEAD) or branch:
    * `$ git branch -f <branch> <location>`
    * `$ git checkout <location>`: go to the branch / move HEAD (if location is not branch name, HEAD is detached)
        * `$ git checkout -b <branch>`: create and checkout
    * location can be branch name / HEAD / hash (see git log)
        * add `^` right after to move 1 level up
        * add `~N` to move N levels up

* `$ git branch -d <branch>`: delete  

* `$ git gui browser <branch>`: view all the files and directories  

* `$ git merge <branch>`: currently in master, merge with branch

---

### tags

`$ git tag <tag> <location>`: tag cannot be moved / changed

`$ git describe <location>`: compare location with its closest ancestor tag
